#!/bin/bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# Fail immediately on non-zero exit code.
set -e
# Fail immediately on non-zero exit code within a pipeline.
set -o pipefail
# Fail on undeclared variables.
set -u
# Debug, echo every command
#set -x

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BP_DIR=`cd $(dirname $0); cd ..; pwd`

echo "BP_DIR is: $BP_DIR"

# Switch to new Node auto build behavior ahead of release
export NEW_BUILD_SCRIPT_BEHAVIOR=true

# Use architecture of multi-buildpack to compose behavior.
# https://github.com/heroku/heroku-buildpack-multi
cp $BP_DIR/.buildpacks $BUILD_DIR/.buildpacks
url=https://github.com/heroku/heroku-buildpack-multi.git
branch=""
dir=$(mktemp -t buildpackXXXXX)
rm -rf $dir

echo "=====> Downloading Buildpack: $url"

if [[ "$url" =~ \.tgz$ ]] || [[ "$url" =~ \.tgz\? ]]; then
  mkdir -p "$dir"
  curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
else
  git clone $url $dir >/dev/null 2>&1
fi
cd $dir

if [ "$branch" != "" ]; then
  git checkout $branch >/dev/null 2>&1
fi

chmod -f +x $dir/bin/{detect,compile,release}

front=$BUILD_DIR/frontend

echo "front contain $(ls "$BUILD_DIR/frontend")"
echo "moving folder frontend"
mv $BUILD_DIR/frontend/* $BUILD_DIR/
rm -rf $BUILD_DIR/frontend


echo "detecting framework at $(ls $1)"
framework=$($dir/bin/detect $1)

echo "build-dir=$1, current dir = $(pwd)"
echo "cat static.json $(cat $1/static.json)"
echo "dir contain $(ls $1)"

if [ $? == 0 ]; then
  echo "=====> Detected Framework: $framework"
  $dir/bin/compile $BUILD_DIR $CACHE_DIR $ENV_DIR

  if [ $? != 0 ]; then
    exit 1
  fi
else
  echo "create-react-app `.buildpacks` not defined. Exiting."
  exit 1
fi